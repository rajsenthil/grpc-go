// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: pb/FibonocciSeries.proto

package fibonocci

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FibonocciServiceClient is the client API for FibonocciService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FibonocciServiceClient interface {
	// Server Streaming
	Fibonocci(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (FibonocciService_FibonocciClient, error)
}

type fibonocciServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFibonocciServiceClient(cc grpc.ClientConnInterface) FibonocciServiceClient {
	return &fibonocciServiceClient{cc}
}

func (c *fibonocciServiceClient) Fibonocci(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (FibonocciService_FibonocciClient, error) {
	stream, err := c.cc.NewStream(ctx, &FibonocciService_ServiceDesc.Streams[0], "/fibonocci.FibonocciService/fibonocci", opts...)
	if err != nil {
		return nil, err
	}
	x := &fibonocciServiceFibonocciClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type FibonocciService_FibonocciClient interface {
	Recv() (*FibonocciResponse, error)
	grpc.ClientStream
}

type fibonocciServiceFibonocciClient struct {
	grpc.ClientStream
}

func (x *fibonocciServiceFibonocciClient) Recv() (*FibonocciResponse, error) {
	m := new(FibonocciResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FibonocciServiceServer is the server API for FibonocciService service.
// All implementations must embed UnimplementedFibonocciServiceServer
// for forward compatibility
type FibonocciServiceServer interface {
	// Server Streaming
	Fibonocci(*empty.Empty, FibonocciService_FibonocciServer) error
	mustEmbedUnimplementedFibonocciServiceServer()
}

// UnimplementedFibonocciServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFibonocciServiceServer struct {
}

func (UnimplementedFibonocciServiceServer) Fibonocci(*empty.Empty, FibonocciService_FibonocciServer) error {
	return status.Errorf(codes.Unimplemented, "method Fibonocci not implemented")
}
func (UnimplementedFibonocciServiceServer) mustEmbedUnimplementedFibonocciServiceServer() {}

// UnsafeFibonocciServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FibonocciServiceServer will
// result in compilation errors.
type UnsafeFibonocciServiceServer interface {
	mustEmbedUnimplementedFibonocciServiceServer()
}

func RegisterFibonocciServiceServer(s grpc.ServiceRegistrar, srv FibonocciServiceServer) {
	s.RegisterService(&FibonocciService_ServiceDesc, srv)
}

func _FibonocciService_Fibonocci_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(empty.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FibonocciServiceServer).Fibonocci(m, &fibonocciServiceFibonocciServer{stream})
}

type FibonocciService_FibonocciServer interface {
	Send(*FibonocciResponse) error
	grpc.ServerStream
}

type fibonocciServiceFibonocciServer struct {
	grpc.ServerStream
}

func (x *fibonocciServiceFibonocciServer) Send(m *FibonocciResponse) error {
	return x.ServerStream.SendMsg(m)
}

// FibonocciService_ServiceDesc is the grpc.ServiceDesc for FibonocciService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FibonocciService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "fibonocci.FibonocciService",
	HandlerType: (*FibonocciServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "fibonocci",
			Handler:       _FibonocciService_Fibonocci_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "pb/FibonocciSeries.proto",
}
